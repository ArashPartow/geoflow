name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  Windows-build:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - name: Install glm, glfw3
      run: |
        echo $env:VCPKG_INSTALLATION_ROOT
        $env:VCPKG_DEFAULT_TRIPLET="x64-windows"
        vcpkg install glm glfw3
    - uses: actions/checkout@v1
    - name: Build
      run: |
        mkdir build
        cd build
        cmake .. -DGF_USE_EXTERNAL_JSON=OFF -DCMAKE_PREFIX_PATH=D:\software -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows
        cmake --build . --parallel 4 --config Release
    - name: Install NSIS
      run: |
        Invoke-WebRequest https://netcologne.dl.sourceforge.net/project/nsis/NSIS%203/3.04/nsis-3.04-setup.exe -OutFile nsis-setup.exe
        .\nsis-setup.exe /S
    - name: Create installer
      run: |
        cd build
        & "C:\Program Files\CMake\bin\cpack" -C Release --verbose
        mv Geoflow-0.1.0-win64.exe Geoflow-win64.exe
    - name: Upload nsis installer as artifact
      uses: actions/upload-artifact@master
      with:
        name: Geoflow-win64
        path: build/Geoflow-win64.exe

  
  Release:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    needs: Windows-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Build
      #   uses: ././github/actions/Build
      - name: Build project # This would actually build your project, using zip for an example artifact
        uses: actions/download-artifact@v1
        with:
          name: Geoflow-win64
          path: build-artifact/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build-artifact/Geoflow-win64.exe
          asset_name: Geoflow-win64.exe
          asset_content_type: application/x-msdownload